// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Moneothingrawdatum is an object representing the database table.
type Moneothingrawdatum struct {
	Thingid   int64     `boil:"thingid" json:"thingid" toml:"thingid" yaml:"thingid"`
	Rawdataid int64     `boil:"rawdataid" json:"rawdataid" toml:"rawdataid" yaml:"rawdataid"`
	Timestamp time.Time `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *moneothingrawdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moneothingrawdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoneothingrawdatumColumns = struct {
	Thingid   string
	Rawdataid string
	Timestamp string
	ID        string
}{
	Thingid:   "thingid",
	Rawdataid: "rawdataid",
	Timestamp: "timestamp",
	ID:        "id",
}

var MoneothingrawdatumTableColumns = struct {
	Thingid   string
	Rawdataid string
	Timestamp string
	ID        string
}{
	Thingid:   "moneothingrawdata.thingid",
	Rawdataid: "moneothingrawdata.rawdataid",
	Timestamp: "moneothingrawdata.timestamp",
	ID:        "moneothingrawdata.id",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var MoneothingrawdatumWhere = struct {
	Thingid   whereHelperint64
	Rawdataid whereHelperint64
	Timestamp whereHelpertime_Time
	ID        whereHelperint64
}{
	Thingid:   whereHelperint64{field: "\"moneothingrawdata\".\"thingid\""},
	Rawdataid: whereHelperint64{field: "\"moneothingrawdata\".\"rawdataid\""},
	Timestamp: whereHelpertime_Time{field: "\"moneothingrawdata\".\"timestamp\""},
	ID:        whereHelperint64{field: "\"moneothingrawdata\".\"id\""},
}

// MoneothingrawdatumRels is where relationship names are stored.
var MoneothingrawdatumRels = struct {
	ThingidMoneothing string
	RawdataidRawdatum string
}{
	ThingidMoneothing: "ThingidMoneothing",
	RawdataidRawdatum: "RawdataidRawdatum",
}

// moneothingrawdatumR is where relationships are stored.
type moneothingrawdatumR struct {
	ThingidMoneothing *Moneothing `boil:"ThingidMoneothing" json:"ThingidMoneothing" toml:"ThingidMoneothing" yaml:"ThingidMoneothing"`
	RawdataidRawdatum *Rawdatum   `boil:"RawdataidRawdatum" json:"RawdataidRawdatum" toml:"RawdataidRawdatum" yaml:"RawdataidRawdatum"`
}

// NewStruct creates a new relationship struct
func (*moneothingrawdatumR) NewStruct() *moneothingrawdatumR {
	return &moneothingrawdatumR{}
}

func (r *moneothingrawdatumR) GetThingidMoneothing() *Moneothing {
	if r == nil {
		return nil
	}
	return r.ThingidMoneothing
}

func (r *moneothingrawdatumR) GetRawdataidRawdatum() *Rawdatum {
	if r == nil {
		return nil
	}
	return r.RawdataidRawdatum
}

// moneothingrawdatumL is where Load methods for each relationship are stored.
type moneothingrawdatumL struct{}

var (
	moneothingrawdatumAllColumns            = []string{"thingid", "rawdataid", "timestamp", "id"}
	moneothingrawdatumColumnsWithoutDefault = []string{"thingid", "rawdataid", "timestamp"}
	moneothingrawdatumColumnsWithDefault    = []string{"id"}
	moneothingrawdatumPrimaryKeyColumns     = []string{"id"}
	moneothingrawdatumGeneratedColumns      = []string{"id"}
)

type (
	// MoneothingrawdatumSlice is an alias for a slice of pointers to Moneothingrawdatum.
	// This should almost always be used instead of []Moneothingrawdatum.
	MoneothingrawdatumSlice []*Moneothingrawdatum
	// MoneothingrawdatumHook is the signature for custom Moneothingrawdatum hook methods
	MoneothingrawdatumHook func(context.Context, boil.ContextExecutor, *Moneothingrawdatum) error

	moneothingrawdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moneothingrawdatumType                 = reflect.TypeOf(&Moneothingrawdatum{})
	moneothingrawdatumMapping              = queries.MakeStructMapping(moneothingrawdatumType)
	moneothingrawdatumPrimaryKeyMapping, _ = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, moneothingrawdatumPrimaryKeyColumns)
	moneothingrawdatumInsertCacheMut       sync.RWMutex
	moneothingrawdatumInsertCache          = make(map[string]insertCache)
	moneothingrawdatumUpdateCacheMut       sync.RWMutex
	moneothingrawdatumUpdateCache          = make(map[string]updateCache)
	moneothingrawdatumUpsertCacheMut       sync.RWMutex
	moneothingrawdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moneothingrawdatumAfterSelectMu sync.Mutex
var moneothingrawdatumAfterSelectHooks []MoneothingrawdatumHook

var moneothingrawdatumBeforeInsertMu sync.Mutex
var moneothingrawdatumBeforeInsertHooks []MoneothingrawdatumHook
var moneothingrawdatumAfterInsertMu sync.Mutex
var moneothingrawdatumAfterInsertHooks []MoneothingrawdatumHook

var moneothingrawdatumBeforeUpdateMu sync.Mutex
var moneothingrawdatumBeforeUpdateHooks []MoneothingrawdatumHook
var moneothingrawdatumAfterUpdateMu sync.Mutex
var moneothingrawdatumAfterUpdateHooks []MoneothingrawdatumHook

var moneothingrawdatumBeforeDeleteMu sync.Mutex
var moneothingrawdatumBeforeDeleteHooks []MoneothingrawdatumHook
var moneothingrawdatumAfterDeleteMu sync.Mutex
var moneothingrawdatumAfterDeleteHooks []MoneothingrawdatumHook

var moneothingrawdatumBeforeUpsertMu sync.Mutex
var moneothingrawdatumBeforeUpsertHooks []MoneothingrawdatumHook
var moneothingrawdatumAfterUpsertMu sync.Mutex
var moneothingrawdatumAfterUpsertHooks []MoneothingrawdatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Moneothingrawdatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Moneothingrawdatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Moneothingrawdatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Moneothingrawdatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Moneothingrawdatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Moneothingrawdatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Moneothingrawdatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Moneothingrawdatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Moneothingrawdatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingrawdatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoneothingrawdatumHook registers your hook function for all future operations.
func AddMoneothingrawdatumHook(hookPoint boil.HookPoint, moneothingrawdatumHook MoneothingrawdatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moneothingrawdatumAfterSelectMu.Lock()
		moneothingrawdatumAfterSelectHooks = append(moneothingrawdatumAfterSelectHooks, moneothingrawdatumHook)
		moneothingrawdatumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		moneothingrawdatumBeforeInsertMu.Lock()
		moneothingrawdatumBeforeInsertHooks = append(moneothingrawdatumBeforeInsertHooks, moneothingrawdatumHook)
		moneothingrawdatumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		moneothingrawdatumAfterInsertMu.Lock()
		moneothingrawdatumAfterInsertHooks = append(moneothingrawdatumAfterInsertHooks, moneothingrawdatumHook)
		moneothingrawdatumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		moneothingrawdatumBeforeUpdateMu.Lock()
		moneothingrawdatumBeforeUpdateHooks = append(moneothingrawdatumBeforeUpdateHooks, moneothingrawdatumHook)
		moneothingrawdatumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		moneothingrawdatumAfterUpdateMu.Lock()
		moneothingrawdatumAfterUpdateHooks = append(moneothingrawdatumAfterUpdateHooks, moneothingrawdatumHook)
		moneothingrawdatumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		moneothingrawdatumBeforeDeleteMu.Lock()
		moneothingrawdatumBeforeDeleteHooks = append(moneothingrawdatumBeforeDeleteHooks, moneothingrawdatumHook)
		moneothingrawdatumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		moneothingrawdatumAfterDeleteMu.Lock()
		moneothingrawdatumAfterDeleteHooks = append(moneothingrawdatumAfterDeleteHooks, moneothingrawdatumHook)
		moneothingrawdatumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		moneothingrawdatumBeforeUpsertMu.Lock()
		moneothingrawdatumBeforeUpsertHooks = append(moneothingrawdatumBeforeUpsertHooks, moneothingrawdatumHook)
		moneothingrawdatumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		moneothingrawdatumAfterUpsertMu.Lock()
		moneothingrawdatumAfterUpsertHooks = append(moneothingrawdatumAfterUpsertHooks, moneothingrawdatumHook)
		moneothingrawdatumAfterUpsertMu.Unlock()
	}
}

// OneG returns a single moneothingrawdatum record from the query using the global executor.
func (q moneothingrawdatumQuery) OneG(ctx context.Context) (*Moneothingrawdatum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single moneothingrawdatum record from the query.
func (q moneothingrawdatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Moneothingrawdatum, error) {
	o := &Moneothingrawdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for moneothingrawdata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Moneothingrawdatum records from the query using the global executor.
func (q moneothingrawdatumQuery) AllG(ctx context.Context) (MoneothingrawdatumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Moneothingrawdatum records from the query.
func (q moneothingrawdatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoneothingrawdatumSlice, error) {
	var o []*Moneothingrawdatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Moneothingrawdatum slice")
	}

	if len(moneothingrawdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Moneothingrawdatum records in the query using the global executor
func (q moneothingrawdatumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Moneothingrawdatum records in the query.
func (q moneothingrawdatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count moneothingrawdata rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q moneothingrawdatumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q moneothingrawdatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if moneothingrawdata exists")
	}

	return count > 0, nil
}

// ThingidMoneothing pointed to by the foreign key.
func (o *Moneothingrawdatum) ThingidMoneothing(mods ...qm.QueryMod) moneothingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Thingid),
	}

	queryMods = append(queryMods, mods...)

	return Moneothings(queryMods...)
}

// RawdataidRawdatum pointed to by the foreign key.
func (o *Moneothingrawdatum) RawdataidRawdatum(mods ...qm.QueryMod) rawdatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Rawdataid),
	}

	queryMods = append(queryMods, mods...)

	return Rawdata(queryMods...)
}

// LoadThingidMoneothing allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moneothingrawdatumL) LoadThingidMoneothing(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoneothingrawdatum interface{}, mods queries.Applicator) error {
	var slice []*Moneothingrawdatum
	var object *Moneothingrawdatum

	if singular {
		var ok bool
		object, ok = maybeMoneothingrawdatum.(*Moneothingrawdatum)
		if !ok {
			object = new(Moneothingrawdatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMoneothingrawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMoneothingrawdatum))
			}
		}
	} else {
		s, ok := maybeMoneothingrawdatum.(*[]*Moneothingrawdatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMoneothingrawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMoneothingrawdatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &moneothingrawdatumR{}
		}
		args[object.Thingid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moneothingrawdatumR{}
			}

			args[obj.Thingid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`moneothings`),
		qm.WhereIn(`moneothings.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Moneothing")
	}

	var resultSlice []*Moneothing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Moneothing")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for moneothings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moneothings")
	}

	if len(moneothingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ThingidMoneothing = foreign
		if foreign.R == nil {
			foreign.R = &moneothingR{}
		}
		foreign.R.ThingidMoneothingrawdata = append(foreign.R.ThingidMoneothingrawdata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Thingid == foreign.ID {
				local.R.ThingidMoneothing = foreign
				if foreign.R == nil {
					foreign.R = &moneothingR{}
				}
				foreign.R.ThingidMoneothingrawdata = append(foreign.R.ThingidMoneothingrawdata, local)
				break
			}
		}
	}

	return nil
}

// LoadRawdataidRawdatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (moneothingrawdatumL) LoadRawdataidRawdatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoneothingrawdatum interface{}, mods queries.Applicator) error {
	var slice []*Moneothingrawdatum
	var object *Moneothingrawdatum

	if singular {
		var ok bool
		object, ok = maybeMoneothingrawdatum.(*Moneothingrawdatum)
		if !ok {
			object = new(Moneothingrawdatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMoneothingrawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMoneothingrawdatum))
			}
		}
	} else {
		s, ok := maybeMoneothingrawdatum.(*[]*Moneothingrawdatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMoneothingrawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMoneothingrawdatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &moneothingrawdatumR{}
		}
		args[object.Rawdataid] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moneothingrawdatumR{}
			}

			args[obj.Rawdataid] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rawdata`),
		qm.WhereIn(`rawdata.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Rawdatum")
	}

	var resultSlice []*Rawdatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Rawdatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rawdata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rawdata")
	}

	if len(rawdatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RawdataidRawdatum = foreign
		if foreign.R == nil {
			foreign.R = &rawdatumR{}
		}
		foreign.R.RawdataidMoneothingrawdata = append(foreign.R.RawdataidMoneothingrawdata, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Rawdataid == foreign.ID {
				local.R.RawdataidRawdatum = foreign
				if foreign.R == nil {
					foreign.R = &rawdatumR{}
				}
				foreign.R.RawdataidMoneothingrawdata = append(foreign.R.RawdataidMoneothingrawdata, local)
				break
			}
		}
	}

	return nil
}

// SetThingidMoneothingG of the moneothingrawdatum to the related item.
// Sets o.R.ThingidMoneothing to related.
// Adds o to related.R.ThingidMoneothingrawdata.
// Uses the global database handle.
func (o *Moneothingrawdatum) SetThingidMoneothingG(ctx context.Context, insert bool, related *Moneothing) error {
	return o.SetThingidMoneothing(ctx, boil.GetContextDB(), insert, related)
}

// SetThingidMoneothing of the moneothingrawdatum to the related item.
// Sets o.R.ThingidMoneothing to related.
// Adds o to related.R.ThingidMoneothingrawdata.
func (o *Moneothingrawdatum) SetThingidMoneothing(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Moneothing) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"moneothingrawdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"thingid"}),
		strmangle.WhereClause("\"", "\"", 2, moneothingrawdatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Thingid = related.ID
	if o.R == nil {
		o.R = &moneothingrawdatumR{
			ThingidMoneothing: related,
		}
	} else {
		o.R.ThingidMoneothing = related
	}

	if related.R == nil {
		related.R = &moneothingR{
			ThingidMoneothingrawdata: MoneothingrawdatumSlice{o},
		}
	} else {
		related.R.ThingidMoneothingrawdata = append(related.R.ThingidMoneothingrawdata, o)
	}

	return nil
}

// SetRawdataidRawdatumG of the moneothingrawdatum to the related item.
// Sets o.R.RawdataidRawdatum to related.
// Adds o to related.R.RawdataidMoneothingrawdata.
// Uses the global database handle.
func (o *Moneothingrawdatum) SetRawdataidRawdatumG(ctx context.Context, insert bool, related *Rawdatum) error {
	return o.SetRawdataidRawdatum(ctx, boil.GetContextDB(), insert, related)
}

// SetRawdataidRawdatum of the moneothingrawdatum to the related item.
// Sets o.R.RawdataidRawdatum to related.
// Adds o to related.R.RawdataidMoneothingrawdata.
func (o *Moneothingrawdatum) SetRawdataidRawdatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Rawdatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"moneothingrawdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rawdataid"}),
		strmangle.WhereClause("\"", "\"", 2, moneothingrawdatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Rawdataid = related.ID
	if o.R == nil {
		o.R = &moneothingrawdatumR{
			RawdataidRawdatum: related,
		}
	} else {
		o.R.RawdataidRawdatum = related
	}

	if related.R == nil {
		related.R = &rawdatumR{
			RawdataidMoneothingrawdata: MoneothingrawdatumSlice{o},
		}
	} else {
		related.R.RawdataidMoneothingrawdata = append(related.R.RawdataidMoneothingrawdata, o)
	}

	return nil
}

// Moneothingrawdata retrieves all the records using an executor.
func Moneothingrawdata(mods ...qm.QueryMod) moneothingrawdatumQuery {
	mods = append(mods, qm.From("\"moneothingrawdata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"moneothingrawdata\".*"})
	}

	return moneothingrawdatumQuery{q}
}

// FindMoneothingrawdatumG retrieves a single record by ID.
func FindMoneothingrawdatumG(ctx context.Context, iD int64, selectCols ...string) (*Moneothingrawdatum, error) {
	return FindMoneothingrawdatum(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMoneothingrawdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoneothingrawdatum(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Moneothingrawdatum, error) {
	moneothingrawdatumObj := &Moneothingrawdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"moneothingrawdata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, moneothingrawdatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from moneothingrawdata")
	}

	if err = moneothingrawdatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moneothingrawdatumObj, err
	}

	return moneothingrawdatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Moneothingrawdatum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Moneothingrawdatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no moneothingrawdata provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moneothingrawdatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moneothingrawdatumInsertCacheMut.RLock()
	cache, cached := moneothingrawdatumInsertCache[key]
	moneothingrawdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moneothingrawdatumAllColumns,
			moneothingrawdatumColumnsWithDefault,
			moneothingrawdatumColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, moneothingrawdatumGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"moneothingrawdata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"moneothingrawdata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into moneothingrawdata")
	}

	if !cached {
		moneothingrawdatumInsertCacheMut.Lock()
		moneothingrawdatumInsertCache[key] = cache
		moneothingrawdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Moneothingrawdatum record using the global executor.
// See Update for more documentation.
func (o *Moneothingrawdatum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Moneothingrawdatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Moneothingrawdatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moneothingrawdatumUpdateCacheMut.RLock()
	cache, cached := moneothingrawdatumUpdateCache[key]
	moneothingrawdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moneothingrawdatumAllColumns,
			moneothingrawdatumPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, moneothingrawdatumGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update moneothingrawdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"moneothingrawdata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, moneothingrawdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, append(wl, moneothingrawdatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update moneothingrawdata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for moneothingrawdata")
	}

	if !cached {
		moneothingrawdatumUpdateCacheMut.Lock()
		moneothingrawdatumUpdateCache[key] = cache
		moneothingrawdatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q moneothingrawdatumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q moneothingrawdatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for moneothingrawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for moneothingrawdata")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MoneothingrawdatumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoneothingrawdatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingrawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"moneothingrawdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, moneothingrawdatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in moneothingrawdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all moneothingrawdatum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Moneothingrawdatum) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Moneothingrawdatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no moneothingrawdata provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moneothingrawdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moneothingrawdatumUpsertCacheMut.RLock()
	cache, cached := moneothingrawdatumUpsertCache[key]
	moneothingrawdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			moneothingrawdatumAllColumns,
			moneothingrawdatumColumnsWithDefault,
			moneothingrawdatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			moneothingrawdatumAllColumns,
			moneothingrawdatumPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, moneothingrawdatumGeneratedColumns)
		update = strmangle.SetComplement(update, moneothingrawdatumGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert moneothingrawdata, could not build update column list")
		}

		ret := strmangle.SetComplement(moneothingrawdatumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(moneothingrawdatumPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert moneothingrawdata, could not build conflict column list")
			}

			conflict = make([]string, len(moneothingrawdatumPrimaryKeyColumns))
			copy(conflict, moneothingrawdatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"moneothingrawdata\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moneothingrawdatumType, moneothingrawdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert moneothingrawdata")
	}

	if !cached {
		moneothingrawdatumUpsertCacheMut.Lock()
		moneothingrawdatumUpsertCache[key] = cache
		moneothingrawdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Moneothingrawdatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Moneothingrawdatum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Moneothingrawdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Moneothingrawdatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Moneothingrawdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moneothingrawdatumPrimaryKeyMapping)
	sql := "DELETE FROM \"moneothingrawdata\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from moneothingrawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for moneothingrawdata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q moneothingrawdatumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q moneothingrawdatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no moneothingrawdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from moneothingrawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for moneothingrawdata")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MoneothingrawdatumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoneothingrawdatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moneothingrawdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingrawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"moneothingrawdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moneothingrawdatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from moneothingrawdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for moneothingrawdata")
	}

	if len(moneothingrawdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Moneothingrawdatum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Moneothingrawdatum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Moneothingrawdatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoneothingrawdatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoneothingrawdatumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty MoneothingrawdatumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoneothingrawdatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoneothingrawdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingrawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"moneothingrawdata\".* FROM \"moneothingrawdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moneothingrawdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in MoneothingrawdatumSlice")
	}

	*o = slice

	return nil
}

// MoneothingrawdatumExistsG checks if the Moneothingrawdatum row exists.
func MoneothingrawdatumExistsG(ctx context.Context, iD int64) (bool, error) {
	return MoneothingrawdatumExists(ctx, boil.GetContextDB(), iD)
}

// MoneothingrawdatumExists checks if the Moneothingrawdatum row exists.
func MoneothingrawdatumExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"moneothingrawdata\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if moneothingrawdata exists")
	}

	return exists, nil
}

// Exists checks if the Moneothingrawdatum row exists.
func (o *Moneothingrawdatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MoneothingrawdatumExists(ctx, exec, o.ID)
}

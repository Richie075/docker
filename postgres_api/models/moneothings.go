// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Moneothing is an object representing the database table.
type Moneothing struct {
	ID               int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Thingid          string `boil:"thingid" json:"thingid" toml:"thingid" yaml:"thingid"`
	Uniqueidentifier string `boil:"uniqueidentifier" json:"uniqueidentifier" toml:"uniqueidentifier" yaml:"uniqueidentifier"`
	Displayname      string `boil:"displayname" json:"displayname" toml:"displayname" yaml:"displayname"`

	R *moneothingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L moneothingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MoneothingColumns = struct {
	ID               string
	Thingid          string
	Uniqueidentifier string
	Displayname      string
}{
	ID:               "id",
	Thingid:          "thingid",
	Uniqueidentifier: "uniqueidentifier",
	Displayname:      "displayname",
}

var MoneothingTableColumns = struct {
	ID               string
	Thingid          string
	Uniqueidentifier string
	Displayname      string
}{
	ID:               "moneothings.id",
	Thingid:          "moneothings.thingid",
	Uniqueidentifier: "moneothings.uniqueidentifier",
	Displayname:      "moneothings.displayname",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MoneothingWhere = struct {
	ID               whereHelperint64
	Thingid          whereHelperstring
	Uniqueidentifier whereHelperstring
	Displayname      whereHelperstring
}{
	ID:               whereHelperint64{field: "\"moneothings\".\"id\""},
	Thingid:          whereHelperstring{field: "\"moneothings\".\"thingid\""},
	Uniqueidentifier: whereHelperstring{field: "\"moneothings\".\"uniqueidentifier\""},
	Displayname:      whereHelperstring{field: "\"moneothings\".\"displayname\""},
}

// MoneothingRels is where relationship names are stored.
var MoneothingRels = struct {
	ThingidMoneothingrawdata string
}{
	ThingidMoneothingrawdata: "ThingidMoneothingrawdata",
}

// moneothingR is where relationships are stored.
type moneothingR struct {
	ThingidMoneothingrawdata MoneothingrawdatumSlice `boil:"ThingidMoneothingrawdata" json:"ThingidMoneothingrawdata" toml:"ThingidMoneothingrawdata" yaml:"ThingidMoneothingrawdata"`
}

// NewStruct creates a new relationship struct
func (*moneothingR) NewStruct() *moneothingR {
	return &moneothingR{}
}

func (r *moneothingR) GetThingidMoneothingrawdata() MoneothingrawdatumSlice {
	if r == nil {
		return nil
	}
	return r.ThingidMoneothingrawdata
}

// moneothingL is where Load methods for each relationship are stored.
type moneothingL struct{}

var (
	moneothingAllColumns            = []string{"id", "thingid", "uniqueidentifier", "displayname"}
	moneothingColumnsWithoutDefault = []string{"thingid", "uniqueidentifier", "displayname"}
	moneothingColumnsWithDefault    = []string{"id"}
	moneothingPrimaryKeyColumns     = []string{"id"}
	moneothingGeneratedColumns      = []string{"id"}
)

type (
	// MoneothingSlice is an alias for a slice of pointers to Moneothing.
	// This should almost always be used instead of []Moneothing.
	MoneothingSlice []*Moneothing
	// MoneothingHook is the signature for custom Moneothing hook methods
	MoneothingHook func(context.Context, boil.ContextExecutor, *Moneothing) error

	moneothingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	moneothingType                 = reflect.TypeOf(&Moneothing{})
	moneothingMapping              = queries.MakeStructMapping(moneothingType)
	moneothingPrimaryKeyMapping, _ = queries.BindMapping(moneothingType, moneothingMapping, moneothingPrimaryKeyColumns)
	moneothingInsertCacheMut       sync.RWMutex
	moneothingInsertCache          = make(map[string]insertCache)
	moneothingUpdateCacheMut       sync.RWMutex
	moneothingUpdateCache          = make(map[string]updateCache)
	moneothingUpsertCacheMut       sync.RWMutex
	moneothingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var moneothingAfterSelectMu sync.Mutex
var moneothingAfterSelectHooks []MoneothingHook

var moneothingBeforeInsertMu sync.Mutex
var moneothingBeforeInsertHooks []MoneothingHook
var moneothingAfterInsertMu sync.Mutex
var moneothingAfterInsertHooks []MoneothingHook

var moneothingBeforeUpdateMu sync.Mutex
var moneothingBeforeUpdateHooks []MoneothingHook
var moneothingAfterUpdateMu sync.Mutex
var moneothingAfterUpdateHooks []MoneothingHook

var moneothingBeforeDeleteMu sync.Mutex
var moneothingBeforeDeleteHooks []MoneothingHook
var moneothingAfterDeleteMu sync.Mutex
var moneothingAfterDeleteHooks []MoneothingHook

var moneothingBeforeUpsertMu sync.Mutex
var moneothingBeforeUpsertHooks []MoneothingHook
var moneothingAfterUpsertMu sync.Mutex
var moneothingAfterUpsertHooks []MoneothingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Moneothing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Moneothing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Moneothing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Moneothing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Moneothing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Moneothing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Moneothing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Moneothing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Moneothing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range moneothingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMoneothingHook registers your hook function for all future operations.
func AddMoneothingHook(hookPoint boil.HookPoint, moneothingHook MoneothingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		moneothingAfterSelectMu.Lock()
		moneothingAfterSelectHooks = append(moneothingAfterSelectHooks, moneothingHook)
		moneothingAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		moneothingBeforeInsertMu.Lock()
		moneothingBeforeInsertHooks = append(moneothingBeforeInsertHooks, moneothingHook)
		moneothingBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		moneothingAfterInsertMu.Lock()
		moneothingAfterInsertHooks = append(moneothingAfterInsertHooks, moneothingHook)
		moneothingAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		moneothingBeforeUpdateMu.Lock()
		moneothingBeforeUpdateHooks = append(moneothingBeforeUpdateHooks, moneothingHook)
		moneothingBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		moneothingAfterUpdateMu.Lock()
		moneothingAfterUpdateHooks = append(moneothingAfterUpdateHooks, moneothingHook)
		moneothingAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		moneothingBeforeDeleteMu.Lock()
		moneothingBeforeDeleteHooks = append(moneothingBeforeDeleteHooks, moneothingHook)
		moneothingBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		moneothingAfterDeleteMu.Lock()
		moneothingAfterDeleteHooks = append(moneothingAfterDeleteHooks, moneothingHook)
		moneothingAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		moneothingBeforeUpsertMu.Lock()
		moneothingBeforeUpsertHooks = append(moneothingBeforeUpsertHooks, moneothingHook)
		moneothingBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		moneothingAfterUpsertMu.Lock()
		moneothingAfterUpsertHooks = append(moneothingAfterUpsertHooks, moneothingHook)
		moneothingAfterUpsertMu.Unlock()
	}
}

// OneG returns a single moneothing record from the query using the global executor.
func (q moneothingQuery) OneG(ctx context.Context) (*Moneothing, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single moneothing record from the query.
func (q moneothingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Moneothing, error) {
	o := &Moneothing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for moneothings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Moneothing records from the query using the global executor.
func (q moneothingQuery) AllG(ctx context.Context) (MoneothingSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Moneothing records from the query.
func (q moneothingQuery) All(ctx context.Context, exec boil.ContextExecutor) (MoneothingSlice, error) {
	var o []*Moneothing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Moneothing slice")
	}

	if len(moneothingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Moneothing records in the query using the global executor
func (q moneothingQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Moneothing records in the query.
func (q moneothingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count moneothings rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q moneothingQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q moneothingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if moneothings exists")
	}

	return count > 0, nil
}

// ThingidMoneothingrawdata retrieves all the moneothingrawdatum's Moneothingrawdata with an executor via thingid column.
func (o *Moneothing) ThingidMoneothingrawdata(mods ...qm.QueryMod) moneothingrawdatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"moneothingrawdata\".\"thingid\"=?", o.ID),
	)

	return Moneothingrawdata(queryMods...)
}

// LoadThingidMoneothingrawdata allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (moneothingL) LoadThingidMoneothingrawdata(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMoneothing interface{}, mods queries.Applicator) error {
	var slice []*Moneothing
	var object *Moneothing

	if singular {
		var ok bool
		object, ok = maybeMoneothing.(*Moneothing)
		if !ok {
			object = new(Moneothing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMoneothing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMoneothing))
			}
		}
	} else {
		s, ok := maybeMoneothing.(*[]*Moneothing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMoneothing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMoneothing))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &moneothingR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &moneothingR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`moneothingrawdata`),
		qm.WhereIn(`moneothingrawdata.thingid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load moneothingrawdata")
	}

	var resultSlice []*Moneothingrawdatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice moneothingrawdata")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on moneothingrawdata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moneothingrawdata")
	}

	if len(moneothingrawdatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ThingidMoneothingrawdata = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moneothingrawdatumR{}
			}
			foreign.R.ThingidMoneothing = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Thingid {
				local.R.ThingidMoneothingrawdata = append(local.R.ThingidMoneothingrawdata, foreign)
				if foreign.R == nil {
					foreign.R = &moneothingrawdatumR{}
				}
				foreign.R.ThingidMoneothing = local
				break
			}
		}
	}

	return nil
}

// AddThingidMoneothingrawdataG adds the given related objects to the existing relationships
// of the moneothing, optionally inserting them as new records.
// Appends related to o.R.ThingidMoneothingrawdata.
// Sets related.R.ThingidMoneothing appropriately.
// Uses the global database handle.
func (o *Moneothing) AddThingidMoneothingrawdataG(ctx context.Context, insert bool, related ...*Moneothingrawdatum) error {
	return o.AddThingidMoneothingrawdata(ctx, boil.GetContextDB(), insert, related...)
}

// AddThingidMoneothingrawdata adds the given related objects to the existing relationships
// of the moneothing, optionally inserting them as new records.
// Appends related to o.R.ThingidMoneothingrawdata.
// Sets related.R.ThingidMoneothing appropriately.
func (o *Moneothing) AddThingidMoneothingrawdata(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Moneothingrawdatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Thingid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"moneothingrawdata\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"thingid"}),
				strmangle.WhereClause("\"", "\"", 2, moneothingrawdatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Thingid = o.ID
		}
	}

	if o.R == nil {
		o.R = &moneothingR{
			ThingidMoneothingrawdata: related,
		}
	} else {
		o.R.ThingidMoneothingrawdata = append(o.R.ThingidMoneothingrawdata, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moneothingrawdatumR{
				ThingidMoneothing: o,
			}
		} else {
			rel.R.ThingidMoneothing = o
		}
	}
	return nil
}

// Moneothings retrieves all the records using an executor.
func Moneothings(mods ...qm.QueryMod) moneothingQuery {
	mods = append(mods, qm.From("\"moneothings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"moneothings\".*"})
	}

	return moneothingQuery{q}
}

// FindMoneothingG retrieves a single record by ID.
func FindMoneothingG(ctx context.Context, iD int64, selectCols ...string) (*Moneothing, error) {
	return FindMoneothing(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMoneothing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMoneothing(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Moneothing, error) {
	moneothingObj := &Moneothing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"moneothings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, moneothingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from moneothings")
	}

	if err = moneothingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return moneothingObj, err
	}

	return moneothingObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Moneothing) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Moneothing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no moneothings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moneothingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	moneothingInsertCacheMut.RLock()
	cache, cached := moneothingInsertCache[key]
	moneothingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			moneothingAllColumns,
			moneothingColumnsWithDefault,
			moneothingColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, moneothingGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(moneothingType, moneothingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(moneothingType, moneothingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"moneothings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"moneothings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into moneothings")
	}

	if !cached {
		moneothingInsertCacheMut.Lock()
		moneothingInsertCache[key] = cache
		moneothingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Moneothing record using the global executor.
// See Update for more documentation.
func (o *Moneothing) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Moneothing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Moneothing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	moneothingUpdateCacheMut.RLock()
	cache, cached := moneothingUpdateCache[key]
	moneothingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			moneothingAllColumns,
			moneothingPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, moneothingGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update moneothings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"moneothings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, moneothingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(moneothingType, moneothingMapping, append(wl, moneothingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update moneothings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for moneothings")
	}

	if !cached {
		moneothingUpdateCacheMut.Lock()
		moneothingUpdateCache[key] = cache
		moneothingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q moneothingQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q moneothingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for moneothings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for moneothings")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MoneothingSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MoneothingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"moneothings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, moneothingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in moneothing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all moneothing")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Moneothing) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Moneothing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no moneothings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(moneothingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	moneothingUpsertCacheMut.RLock()
	cache, cached := moneothingUpsertCache[key]
	moneothingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			moneothingAllColumns,
			moneothingColumnsWithDefault,
			moneothingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			moneothingAllColumns,
			moneothingPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, moneothingGeneratedColumns)
		update = strmangle.SetComplement(update, moneothingGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert moneothings, could not build update column list")
		}

		ret := strmangle.SetComplement(moneothingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(moneothingPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert moneothings, could not build conflict column list")
			}

			conflict = make([]string, len(moneothingPrimaryKeyColumns))
			copy(conflict, moneothingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"moneothings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(moneothingType, moneothingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(moneothingType, moneothingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert moneothings")
	}

	if !cached {
		moneothingUpsertCacheMut.Lock()
		moneothingUpsertCache[key] = cache
		moneothingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Moneothing record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Moneothing) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Moneothing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Moneothing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Moneothing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), moneothingPrimaryKeyMapping)
	sql := "DELETE FROM \"moneothings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from moneothings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for moneothings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q moneothingQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q moneothingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no moneothingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from moneothings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for moneothings")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MoneothingSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MoneothingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(moneothingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"moneothings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moneothingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from moneothing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for moneothings")
	}

	if len(moneothingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Moneothing) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Moneothing provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Moneothing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMoneothing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoneothingSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty MoneothingSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MoneothingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MoneothingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), moneothingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"moneothings\".* FROM \"moneothings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, moneothingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in MoneothingSlice")
	}

	*o = slice

	return nil
}

// MoneothingExistsG checks if the Moneothing row exists.
func MoneothingExistsG(ctx context.Context, iD int64) (bool, error) {
	return MoneothingExists(ctx, boil.GetContextDB(), iD)
}

// MoneothingExists checks if the Moneothing row exists.
func MoneothingExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"moneothings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if moneothings exists")
	}

	return exists, nil
}

// Exists checks if the Moneothing row exists.
func (o *Moneothing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MoneothingExists(ctx, exec, o.ID)
}

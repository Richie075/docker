// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Rawdatum is an object representing the database table.
type Rawdatum struct {
	ID    int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Value string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *rawdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rawdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RawdatumColumns = struct {
	ID    string
	Value string
}{
	ID:    "id",
	Value: "value",
}

var RawdatumTableColumns = struct {
	ID    string
	Value string
}{
	ID:    "rawdata.id",
	Value: "rawdata.value",
}

// Generated where

var RawdatumWhere = struct {
	ID    whereHelperint64
	Value whereHelperstring
}{
	ID:    whereHelperint64{field: "\"rawdata\".\"id\""},
	Value: whereHelperstring{field: "\"rawdata\".\"value\""},
}

// RawdatumRels is where relationship names are stored.
var RawdatumRels = struct {
	RawdataidMoneothingrawdata string
}{
	RawdataidMoneothingrawdata: "RawdataidMoneothingrawdata",
}

// rawdatumR is where relationships are stored.
type rawdatumR struct {
	RawdataidMoneothingrawdata MoneothingrawdatumSlice `boil:"RawdataidMoneothingrawdata" json:"RawdataidMoneothingrawdata" toml:"RawdataidMoneothingrawdata" yaml:"RawdataidMoneothingrawdata"`
}

// NewStruct creates a new relationship struct
func (*rawdatumR) NewStruct() *rawdatumR {
	return &rawdatumR{}
}

func (r *rawdatumR) GetRawdataidMoneothingrawdata() MoneothingrawdatumSlice {
	if r == nil {
		return nil
	}
	return r.RawdataidMoneothingrawdata
}

// rawdatumL is where Load methods for each relationship are stored.
type rawdatumL struct{}

var (
	rawdatumAllColumns            = []string{"id", "value"}
	rawdatumColumnsWithoutDefault = []string{"value"}
	rawdatumColumnsWithDefault    = []string{"id"}
	rawdatumPrimaryKeyColumns     = []string{"id"}
	rawdatumGeneratedColumns      = []string{"id"}
)

type (
	// RawdatumSlice is an alias for a slice of pointers to Rawdatum.
	// This should almost always be used instead of []Rawdatum.
	RawdatumSlice []*Rawdatum
	// RawdatumHook is the signature for custom Rawdatum hook methods
	RawdatumHook func(context.Context, boil.ContextExecutor, *Rawdatum) error

	rawdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rawdatumType                 = reflect.TypeOf(&Rawdatum{})
	rawdatumMapping              = queries.MakeStructMapping(rawdatumType)
	rawdatumPrimaryKeyMapping, _ = queries.BindMapping(rawdatumType, rawdatumMapping, rawdatumPrimaryKeyColumns)
	rawdatumInsertCacheMut       sync.RWMutex
	rawdatumInsertCache          = make(map[string]insertCache)
	rawdatumUpdateCacheMut       sync.RWMutex
	rawdatumUpdateCache          = make(map[string]updateCache)
	rawdatumUpsertCacheMut       sync.RWMutex
	rawdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rawdatumAfterSelectMu sync.Mutex
var rawdatumAfterSelectHooks []RawdatumHook

var rawdatumBeforeInsertMu sync.Mutex
var rawdatumBeforeInsertHooks []RawdatumHook
var rawdatumAfterInsertMu sync.Mutex
var rawdatumAfterInsertHooks []RawdatumHook

var rawdatumBeforeUpdateMu sync.Mutex
var rawdatumBeforeUpdateHooks []RawdatumHook
var rawdatumAfterUpdateMu sync.Mutex
var rawdatumAfterUpdateHooks []RawdatumHook

var rawdatumBeforeDeleteMu sync.Mutex
var rawdatumBeforeDeleteHooks []RawdatumHook
var rawdatumAfterDeleteMu sync.Mutex
var rawdatumAfterDeleteHooks []RawdatumHook

var rawdatumBeforeUpsertMu sync.Mutex
var rawdatumBeforeUpsertHooks []RawdatumHook
var rawdatumAfterUpsertMu sync.Mutex
var rawdatumAfterUpsertHooks []RawdatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rawdatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rawdatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rawdatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rawdatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rawdatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rawdatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rawdatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rawdatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rawdatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rawdatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRawdatumHook registers your hook function for all future operations.
func AddRawdatumHook(hookPoint boil.HookPoint, rawdatumHook RawdatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rawdatumAfterSelectMu.Lock()
		rawdatumAfterSelectHooks = append(rawdatumAfterSelectHooks, rawdatumHook)
		rawdatumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rawdatumBeforeInsertMu.Lock()
		rawdatumBeforeInsertHooks = append(rawdatumBeforeInsertHooks, rawdatumHook)
		rawdatumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rawdatumAfterInsertMu.Lock()
		rawdatumAfterInsertHooks = append(rawdatumAfterInsertHooks, rawdatumHook)
		rawdatumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rawdatumBeforeUpdateMu.Lock()
		rawdatumBeforeUpdateHooks = append(rawdatumBeforeUpdateHooks, rawdatumHook)
		rawdatumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rawdatumAfterUpdateMu.Lock()
		rawdatumAfterUpdateHooks = append(rawdatumAfterUpdateHooks, rawdatumHook)
		rawdatumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rawdatumBeforeDeleteMu.Lock()
		rawdatumBeforeDeleteHooks = append(rawdatumBeforeDeleteHooks, rawdatumHook)
		rawdatumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rawdatumAfterDeleteMu.Lock()
		rawdatumAfterDeleteHooks = append(rawdatumAfterDeleteHooks, rawdatumHook)
		rawdatumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rawdatumBeforeUpsertMu.Lock()
		rawdatumBeforeUpsertHooks = append(rawdatumBeforeUpsertHooks, rawdatumHook)
		rawdatumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rawdatumAfterUpsertMu.Lock()
		rawdatumAfterUpsertHooks = append(rawdatumAfterUpsertHooks, rawdatumHook)
		rawdatumAfterUpsertMu.Unlock()
	}
}

// OneG returns a single rawdatum record from the query using the global executor.
func (q rawdatumQuery) OneG(ctx context.Context) (*Rawdatum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single rawdatum record from the query.
func (q rawdatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rawdatum, error) {
	o := &Rawdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for rawdata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Rawdatum records from the query using the global executor.
func (q rawdatumQuery) AllG(ctx context.Context) (RawdatumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Rawdatum records from the query.
func (q rawdatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (RawdatumSlice, error) {
	var o []*Rawdatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Rawdatum slice")
	}

	if len(rawdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Rawdatum records in the query using the global executor
func (q rawdatumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Rawdatum records in the query.
func (q rawdatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count rawdata rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q rawdatumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q rawdatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if rawdata exists")
	}

	return count > 0, nil
}

// RawdataidMoneothingrawdata retrieves all the moneothingrawdatum's Moneothingrawdata with an executor via rawdataid column.
func (o *Rawdatum) RawdataidMoneothingrawdata(mods ...qm.QueryMod) moneothingrawdatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"moneothingrawdata\".\"rawdataid\"=?", o.ID),
	)

	return Moneothingrawdata(queryMods...)
}

// LoadRawdataidMoneothingrawdata allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (rawdatumL) LoadRawdataidMoneothingrawdata(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRawdatum interface{}, mods queries.Applicator) error {
	var slice []*Rawdatum
	var object *Rawdatum

	if singular {
		var ok bool
		object, ok = maybeRawdatum.(*Rawdatum)
		if !ok {
			object = new(Rawdatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRawdatum))
			}
		}
	} else {
		s, ok := maybeRawdatum.(*[]*Rawdatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRawdatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRawdatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &rawdatumR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rawdatumR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`moneothingrawdata`),
		qm.WhereIn(`moneothingrawdata.rawdataid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load moneothingrawdata")
	}

	var resultSlice []*Moneothingrawdatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice moneothingrawdata")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on moneothingrawdata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for moneothingrawdata")
	}

	if len(moneothingrawdatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RawdataidMoneothingrawdata = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moneothingrawdatumR{}
			}
			foreign.R.RawdataidRawdatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Rawdataid {
				local.R.RawdataidMoneothingrawdata = append(local.R.RawdataidMoneothingrawdata, foreign)
				if foreign.R == nil {
					foreign.R = &moneothingrawdatumR{}
				}
				foreign.R.RawdataidRawdatum = local
				break
			}
		}
	}

	return nil
}

// AddRawdataidMoneothingrawdataG adds the given related objects to the existing relationships
// of the rawdatum, optionally inserting them as new records.
// Appends related to o.R.RawdataidMoneothingrawdata.
// Sets related.R.RawdataidRawdatum appropriately.
// Uses the global database handle.
func (o *Rawdatum) AddRawdataidMoneothingrawdataG(ctx context.Context, insert bool, related ...*Moneothingrawdatum) error {
	return o.AddRawdataidMoneothingrawdata(ctx, boil.GetContextDB(), insert, related...)
}

// AddRawdataidMoneothingrawdata adds the given related objects to the existing relationships
// of the rawdatum, optionally inserting them as new records.
// Appends related to o.R.RawdataidMoneothingrawdata.
// Sets related.R.RawdataidRawdatum appropriately.
func (o *Rawdatum) AddRawdataidMoneothingrawdata(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Moneothingrawdatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Rawdataid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"moneothingrawdata\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rawdataid"}),
				strmangle.WhereClause("\"", "\"", 2, moneothingrawdatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Rawdataid = o.ID
		}
	}

	if o.R == nil {
		o.R = &rawdatumR{
			RawdataidMoneothingrawdata: related,
		}
	} else {
		o.R.RawdataidMoneothingrawdata = append(o.R.RawdataidMoneothingrawdata, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moneothingrawdatumR{
				RawdataidRawdatum: o,
			}
		} else {
			rel.R.RawdataidRawdatum = o
		}
	}
	return nil
}

// Rawdata retrieves all the records using an executor.
func Rawdata(mods ...qm.QueryMod) rawdatumQuery {
	mods = append(mods, qm.From("\"rawdata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"rawdata\".*"})
	}

	return rawdatumQuery{q}
}

// FindRawdatumG retrieves a single record by ID.
func FindRawdatumG(ctx context.Context, iD int64, selectCols ...string) (*Rawdatum, error) {
	return FindRawdatum(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRawdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRawdatum(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Rawdatum, error) {
	rawdatumObj := &Rawdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rawdata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rawdatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from rawdata")
	}

	if err = rawdatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rawdatumObj, err
	}

	return rawdatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Rawdatum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rawdatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no rawdata provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rawdatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rawdatumInsertCacheMut.RLock()
	cache, cached := rawdatumInsertCache[key]
	rawdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rawdatumAllColumns,
			rawdatumColumnsWithDefault,
			rawdatumColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, rawdatumGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(rawdatumType, rawdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rawdatumType, rawdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rawdata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rawdata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into rawdata")
	}

	if !cached {
		rawdatumInsertCacheMut.Lock()
		rawdatumInsertCache[key] = cache
		rawdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Rawdatum record using the global executor.
// See Update for more documentation.
func (o *Rawdatum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Rawdatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rawdatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rawdatumUpdateCacheMut.RLock()
	cache, cached := rawdatumUpdateCache[key]
	rawdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rawdatumAllColumns,
			rawdatumPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, rawdatumGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update rawdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rawdata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rawdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rawdatumType, rawdatumMapping, append(wl, rawdatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update rawdata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for rawdata")
	}

	if !cached {
		rawdatumUpdateCacheMut.Lock()
		rawdatumUpdateCache[key] = cache
		rawdatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q rawdatumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q rawdatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for rawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for rawdata")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RawdatumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RawdatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rawdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rawdatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in rawdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all rawdatum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Rawdatum) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Rawdatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no rawdata provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rawdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rawdatumUpsertCacheMut.RLock()
	cache, cached := rawdatumUpsertCache[key]
	rawdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rawdatumAllColumns,
			rawdatumColumnsWithDefault,
			rawdatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rawdatumAllColumns,
			rawdatumPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, rawdatumGeneratedColumns)
		update = strmangle.SetComplement(update, rawdatumGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert rawdata, could not build update column list")
		}

		ret := strmangle.SetComplement(rawdatumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rawdatumPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert rawdata, could not build conflict column list")
			}

			conflict = make([]string, len(rawdatumPrimaryKeyColumns))
			copy(conflict, rawdatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rawdata\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rawdatumType, rawdatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rawdatumType, rawdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert rawdata")
	}

	if !cached {
		rawdatumUpsertCacheMut.Lock()
		rawdatumUpsertCache[key] = cache
		rawdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Rawdatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Rawdatum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Rawdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rawdatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Rawdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rawdatumPrimaryKeyMapping)
	sql := "DELETE FROM \"rawdata\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from rawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for rawdata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q rawdatumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q rawdatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no rawdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from rawdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for rawdata")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RawdatumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RawdatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rawdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rawdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rawdatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from rawdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for rawdata")
	}

	if len(rawdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Rawdatum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: no Rawdatum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rawdatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRawdatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RawdatumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("dbmodels: empty RawdatumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RawdatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RawdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rawdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rawdata\".* FROM \"rawdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rawdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in RawdatumSlice")
	}

	*o = slice

	return nil
}

// RawdatumExistsG checks if the Rawdatum row exists.
func RawdatumExistsG(ctx context.Context, iD int64) (bool, error) {
	return RawdatumExists(ctx, boil.GetContextDB(), iD)
}

// RawdatumExists checks if the Rawdatum row exists.
func RawdatumExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rawdata\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if rawdata exists")
	}

	return exists, nil
}

// Exists checks if the Rawdatum row exists.
func (o *Rawdatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RawdatumExists(ctx, exec, o.ID)
}
